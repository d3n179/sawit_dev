<?php
/**
 * ActiveRecord Generator on the fly.
 *
 * @author Kampre <joe_kampre[at]yahool[dot]com>
 * @link http://www.intergo.co.id/
 * @copyright Copyright &copy; 2003-2009 Intergo
 * @license http://www.intergo.co.id/license/
 * @version $Id: ActiveRecordGen.php 2498 2009-06-17 04:28:11Z joe $
 * 
 * How to use this module? Simple juat look at the example below:
 * $n = new ActiveRecordGen();//Instance Created
 * $n->executeAR('$class_name','tabel_name','main_directory');
 * 
 * Real Case:
 * $tmpAR = new ActiveRecordGen();
 * $tmpAR->executeAR('TestingRecord','testing','simak');
 * 
 * Description:
 * Class File Name = TestingRecord.php
 * Table Name = testing
 * Main Directory = simak
 * 
 * Simple but powerfull, happy coding!!! :)
 */
class PradoShellApplication extends TApplication
{
	public function run()
	{
		$this->initApplication();
	}
}

class ActiveRecordGen
{
	protected function generateActiveRecord($config, $tablename, $output)
	{
		$manager = TActiveRecordManager::getInstance();
		if($connection = $manager->getDbConnection()) {
			$gateway = $manager->getRecordGateway();
			$tableInfo = $gateway->getTableInfo($manager->getDbConnection(), $tablename);
			if(count($tableInfo->getColumns()) === 0)
			{
				echo '** Unable to find table or view "'.$tablename.'" in "'.$manager->getDbConnection()->getConnectionString()."\".\n";
				return false;
			}
			else
			{
				$properties = array();
				foreach($tableInfo->getColumns() as $field=>$column)
					$properties[] = $this->generateProperty($field,$column);
			}
			
			
			$classname = basename($output, '.php');
			$class = $this->generateClass($properties, $tablename, $classname);
			//echo "  Writing class $classname to file $output\n";
			file_put_contents($output, $class);
			
		} else {
			echo '** Unable to connect to database with ConnectionID=\''.$config->getConnectionID()."'. Please check your settings in application.xml and ensure your database connection is set up first.\n";
		}
	}
	
	protected function generateProperty($field,$column)
	{
		$prop = '';
		$name = '$'.$field;
		$type = $column->getPHPType();
		if($this->_soap)
		{
			$prop .= <<<EOD

	/**
	 * @var $type $name
	 * @soapproperty
	 */

EOD;
		}
		$prop .= "\tpublic $name;";
		return $prop;
	}
	
	protected function generateClass($properties, $tablename, $class)
	{
		$props = implode("\n", $properties);
		$date = date('Y-m-d h:i:s');
return <<<EOD
<?php
/**
 * Auto generated by Kampre ~ ActiveRecordGen.php on $date.
 */
class $class extends TActiveRecord
{
	const TABLE='$tablename';

$props

	public static function finder(\$className=__CLASS__)
	{
		return parent::finder(\$className);
	}
}
?>
EOD;
	}

protected function getActiveRecordConfig($app_dir)
	{
		if(false === ($xml=$this->getXmlFile($app_dir)))
			return false;
		if(false !== ($app=$this->initializePradoApplication($app_dir)))
		{
			Prado::using('System.Data.ActiveRecord.TActiveRecordConfig');
			foreach($app->getModules() as $module)
				if($module instanceof TActiveRecordConfig)
					return $module;
			echo '** Unable to find TActiveRecordConfig module in '.$xml."\n";
		}
		return false;
	}
	
	public function executeAR($namaFile,$tabel,$app_dir)
	{		
		if($app_dir <> '')
		{
			$config = $this->getActiveRecordConfig($app_dir);
			$output = $this->getOutputFile($app_dir, $namaFile);
			if(is_file($output))
				//echo "** File $output already exists, skiping. \n";
                
				$this->generateActiveRecord($config, $tabel, $output);
			else if($config !== false && $output !== false)
				$this->generateActiveRecord($config, $tabel, $output);
		}
		return true;
	}	
	
	protected function getXmlFile($app_dir)
	{	
		$path = realpath(dirname(trim($app_dir)));	
		$xml = $path.DIRECTORY_SEPARATOR.'protected'.DIRECTORY_SEPARATOR.'application.xml';		
		if(is_file($xml))
		{
			return $xml;
		}else{	
			echo '** Unable to find application.xml in '.$app_dir."\n";
			return false;
		}
	}
	
	protected function getOutputFile($dir, $namespace)
	{
		$path = realpath(dirname(trim($dir)));		
		$app_dir  = $path.DIRECTORY_SEPARATOR.'protected'.DIRECTORY_SEPARATOR.'database';
		$file = $app_dir .DIRECTORY_SEPARATOR.$namespace .'.php';		
		if($file !== null && is_dir($path))
		{			
				return $file;
		}
		echo '** Output file '.$file.' must be within directory '.$app_dir."\n";
		return false;
	}
	
	protected function initializePradoApplication($directory)
	{
		$app_dir = realpath(dirname(trim($directory))).'/protected/';
		if($app_dir !== false && is_dir($app_dir))
		{
			if(Prado::getApplication()===null)
			{
				$app = new PradoShellApplication($app_dir);
				$app->run();
				$dir = substr(str_replace(realpath('./'),'',$app_dir),1);
				$initialized=true;
				echo '** Loaded PRADO appplication in directory "'.$dir."\".\n";
			}

			return Prado::getApplication();
		}
		else
		{
			echo '+'.str_repeat('-',77)."+\n";
			echo '** Unable to load PRADO application in directory "'.$directory."\".\n";
			echo '+'.str_repeat('-',77)."+\n";
		}
		return false;
	}
}
?>
